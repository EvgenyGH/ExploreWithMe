DROP TABLE IF EXISTS users, events, locations, categories, compilations, participation_requests,
    compilation_event_connector CASCADE;

CREATE TABLE IF NOT EXISTS categories
(
    category_id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name        varchar(50) UNIQUE NOT NULL
);


CREATE TABLE IF NOT EXISTS compilations
(
    compilation_id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    pinned         boolean      NOT NULL,
    title          varchar(100) NOT NULL
);

CREATE TABLE IF NOT EXISTS locations
(
    location_id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    latitude    real NOT NULL,
    longitude   real NOT NULL
);

CREATE TABLE IF NOT EXISTS users
(
    user_id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email   varchar(50) UNIQUE NOT NULL,
    name    varchar(50)        NOT NULL
);

CREATE TABLE IF NOT EXISTS events
(
    event_id           bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    annotation         varchar(2000) NOT NULL,
    created            timestamp     NOT NULL,
    description        varchar(7000) NOT NULL,
    event_date         timestamp     NOT NULL,
    paid               boolean       NOT NULL,
    participant_limit  integer       NOT NULL,
    published          timestamp,
    request_moderation boolean       NOT NULL,
    state              varchar(20)   NOT NULL,
    title              varchar(120)  NOT NULL,
    category_id        bigint        NOT NULL
        constraint fk_cat_id references categories,
    initiator_id       bigint        NOT NULL
        constraint fk_initiator_id references users,
    location_id        bigint        NOT NULL
        constraint fk_loc_id references locations
);

CREATE TABLE IF NOT EXISTS participation_requests
(
    request_id   bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created      timestamp   NOT NULL,
    status       varchar(20) NOT NULL,
    event_id     bigint      NOT NULL
        constraint fk_event_id references events,
    requester_id bigint      NOT NULL
        constraint fk_requester_id references users
);

CREATE TABLE IF NOT EXISTS compilation_event_connector
(
    compilation_id bigint NOT NULL
        constraint fk_compilation_conn_id
            references compilations ON DELETE CASCADE,
    event_id       bigint
        constraint fk_event_conn_id
            references events ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS set_locations
(
    id          bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name        varchar(50)   not null
        constraint uk_name_loc unique,
    longitude   real          not null,
    latitude    real          not null,
    description varchar(1000) not null,
    radius      real          not null
);

CREATE OR REPLACE FUNCTION distance(lat1 float, lon1 float, lat2 float, lon2 float)
    RETURNS float
AS
'
    declare
        dist      float = 0;
        rad_lat1  float;
        rad_lat2  float;
        theta     float;
        rad_theta float;
    BEGIN
        IF lat1 = lat2 AND lon1 = lon2
        THEN
            RETURN dist;
        ELSE
            -- переводим градусы широты в радианы
            rad_lat1 = pi() * lat1 / 180;
            -- переводим градусы долготы в радианы
            rad_lat2 = pi() * lat2 / 180;
            -- находим разность долгот
            theta = lon1 - lon2;
            -- переводим градусы в радианы
            rad_theta = pi() * theta / 180;
            -- находим длину ортодромии
            dist = sin(rad_lat1) * sin(rad_lat2) + cos(rad_lat1) * cos(rad_lat2) * cos(rad_theta);

            IF dist > 1
            THEN
                dist = 1;
            END IF;

            dist = acos(dist);
            -- переводим радианы в градусы
            dist = dist * 180 / pi();
            -- переводим градусы в километры
            dist = dist * 60 * 1.8524;

            RETURN dist;
        END IF;
    END;
'
    LANGUAGE PLPGSQL;